<?php

/**
 * @file
 * Tests for formfilterapi module.
 */

/**
 * Testing the module functions.
 */
class FormfilterapiTestCase extends DrupalWebTestCase {

  /**
   * A user with permission the access example page.
   *
   * @var object
   */
  protected $web_user;

  public static function getInfo() {
    return array(
      'name' => 'Testing the functional module',
      'description' => 'Testing the module module-based example.',
      'group' => 'Formfilterapi',
    );
  }

  public function setUp() {
    parent::setUp(array('formfilterapi', 'formfilterapi_example'));

    $this->web_user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($this->web_user);
  }

  /**
   * Filtering results when there is no node.
   */
  public function testNoResults() {
    $edit = array();
    $edit['status[type]'] = 'page';

    $this->drupalPost('formfilterapi_example', $edit, t('Filter'));

    $filter_result = $this->xpath('//div[@id="node-1"]');
    $this->assertEqual(0, count($filter_result));
  }

  /**
   * Filter by type of material.
   */
  public function testFilterType() {
    $edit = array();
    $edit['status[type]'] = 'page';

    // Create node with type "page".
    $this->drupalCreateNode();
    $this->drupalPost('formfilterapi_example', $edit, t('Filter'));

    $filter_result = $this->xpath('//div[@id="node-1"]');
    $this->assertEqual(1, count($filter_result));

    // Create the second node.
    $this->drupalCreateNode();
    $this->drupalPost('formfilterapi_example', $edit, t('Refine'));

    $filter_result = $this->xpath('//div[starts-with(@class, "node ")]');
    $this->assertEqual(2, count($filter_result));
  }

  /**
   * Type filtering creator node.
   */
  public function testFilterUser() {
    $edit = array();
    $edit['status[uid]'] = $this->web_user->uid;

    // Create a node on behalf of the user.
    $this->drupalCreateNode(array(
      'uid' => $this->web_user->uid,
    ));

    $this->drupalPost('formfilterapi_example', $edit, t('Filter'));
    $filter_result = $this->xpath('//div[@id="node-1"]');
    $this->assertEqual(1, count($filter_result));
  }

  /**
   * The use of all filters.
   */
  public function testFilters() {
    $node = $this->drupalCreateNode(array(
      'uid' => $this->web_user->uid,
    ));

    $edit = array();
    $edit['status[title]'] = $node->title;
    $edit['status[type]'] = 'page';
    $edit['status[uid]'] = $this->web_user->uid;

    $this->drupalPost('formfilterapi_example', $edit, t('Filter'));
    $filter_result = $this->xpath('//div[@id="node-1"]');
    $this->assertEqual(1, count($filter_result));
  }
}

/**
 * Testing form filter api queries.
 */
class FormfilterapiQueryTestCase extends DrupalWebTestCase {

  /**
   * A user with permission the access example page.
   *
   * @var object
   */
  protected $web_user;

  public static function getInfo() {
    return array(
      'name' => 'Testing form filter api queries',
      'description' => 'Testing options for filtering.',
      'group' => 'Formfilterapi',
    );
  }

  public function setUp() {
    parent::setUp(array('formfilterapi', 'formfilterapi_example'));

    $this->web_user = $this->drupalCreateUser(array('access content'));
    $this->drupalLogin($this->web_user);
  }

  /**
   * Testing the "LIKE" query.
   */
  public function testLikeQuery() {
    $node = $this->drupalCreateNode();

    // Verifying LIKE.
    $title = substr($node->title, 1, strlen($node->title) - 2);
    $edit = array();
    $edit['status[title]'] = $title;

    $this->drupalPost('formfilterapi_example', $edit, t('Filter'));
    $filter_result = $this->xpath('//div[@id="node-1"]');
    $this->assertEqual(1, count($filter_result));
  }

  /**
   * Testing the "Operation" query.
   */
  public function testOperationQuery() {
    $this->drupalCreateNode();
    $this->drupalCreateNode(array(
      'status' => 0,
    ));

    $edit = array();
    $edit['status[status]'] = '> 0';

    $this->drupalPost('formfilterapi_example', $edit, t('Filter'));
    $filter_result = $this->xpath('//div[@id="node-1"]');
    $this->assertEqual(1, count($filter_result));
  }

  /**
   * Testing the "Expression" query.
   */
  public function testExpressionQuery() {
    $this->drupalCreateNode();
    $this->drupalCreateNode(array(
      'status' => 1,
      'promote' => 1,
    ));

    $this->drupalCreateNode(array(
      'status' => 1,
      'promote' => 1,
    ));

    $edit = array();
    $edit['status[status]'] = '> 0';
    $edit['status[promote]'] = 1;

    $this->drupalPost('formfilterapi_example', $edit, t('Filter'));
    $filter_result = $this->xpath('//div[contains(@class, "node")]');
    $this->assertEqual(2, count($filter_result));
  }

  /**
   * Testing the join.
   */
  public function testJoin() {
    $account = $this->drupalCreateUser(array('administer nodes'));

    // Create thee nodes.
    $this->drupalCreateNode();
    $this->drupalCreateNode(array(
      'uid' => $account->uid,
      'status' => 0,
    ));
    $this->drupalCreateNode(array(
      'uid' => $account->uid,
      'status' => 1,
    ));

    $this->drupalPost('formfilterapi_example', array(), t('Filter'));
    $filter_result = $this->xpath('//div[contains(@class, "node")]');
    $this->assertEqual(3, count($filter_result));

    $edit = array();
    $edit['status[uid]'] = $account->uid;

    $this->drupalPost('formfilterapi_example', $edit, t('Filter'));
    $filter_result = $this->xpath('//div[contains(@class, "node")]');
    $this->assertEqual(2, count($filter_result));
  }

  /**
   * Testing the _alter.
   */
  public function testAlter() {
    $this->drupalCreateNode();

    $this->drupalPost('formfilterapi_example', array(), t('Filter'));
    $filter_result = $this->xpath('//select[@name="status[sticky]"]');
    $this->assertEqual(1, count($filter_result));
  }
}
